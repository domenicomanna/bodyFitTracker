// <auto-generated />
using System;
using Api.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Persistence.migrations
{
    [DbContext(typeof(BodyFitTrackerContext))]
    partial class BodyFitTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Models.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<string>("MeasurementSystemPreference")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AppUserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            AppUserId = 1,
                            Email = "mannadomenico2849@gmail.com",
                            Gender = "Male",
                            HashedPassword = "Xt+eYgLCOWjNy3YBxMWvcDKOQoEVtVwIyCDp9qfo+ag=",
                            Height = 60.0,
                            MeasurementSystemPreference = "Imperial",
                            Salt = "HvJRurMKIz+KkIpQhw4DpA=="
                        },
                        new
                        {
                            AppUserId = 2,
                            Email = "bcdf@gmail.com",
                            Gender = "Female",
                            HashedPassword = "Xt+eYgLCOWjNy3YBxMWvcDKOQoEVtVwIyCDp9qfo+ag=",
                            Height = 55.0,
                            MeasurementSystemPreference = "Imperial",
                            Salt = "HvJRurMKIz+KkIpQhw4DpA=="
                        });
                });

            modelBuilder.Entity("Api.Domain.Models.BodyMeasurement", b =>
                {
                    b.Property<int>("BodyMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<double>("BodyFatPercentage")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<double?>("HipCircumference")
                        .HasColumnType("double");

                    b.Property<double>("NeckCircumference")
                        .HasColumnType("double");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("WaistCircumference")
                        .HasColumnType("double");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("BodyMeasurementId");

                    b.HasIndex("AppUserId");

                    b.ToTable("BodyMeasurements");

                    b.HasData(
                        new
                        {
                            BodyMeasurementId = 1,
                            AppUserId = 1,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 125.0
                        },
                        new
                        {
                            BodyMeasurementId = 2,
                            AppUserId = 1,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 120.0
                        },
                        new
                        {
                            BodyMeasurementId = 3,
                            AppUserId = 1,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 130.0
                        },
                        new
                        {
                            BodyMeasurementId = 4,
                            AppUserId = 1,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 145.0
                        },
                        new
                        {
                            BodyMeasurementId = 5,
                            AppUserId = 1,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 115.0
                        },
                        new
                        {
                            BodyMeasurementId = 6,
                            AppUserId = 2,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            HipCircumference = 20.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 121.0
                        },
                        new
                        {
                            BodyMeasurementId = 7,
                            AppUserId = 2,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            HipCircumference = 20.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 122.0
                        },
                        new
                        {
                            BodyMeasurementId = 8,
                            AppUserId = 2,
                            BodyFatPercentage = 10.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            HipCircumference = 20.0,
                            NeckCircumference = 10.0,
                            Units = "Imperial",
                            WaistCircumference = 30.0,
                            Weight = 125.0
                        },
                        new
                        {
                            BodyMeasurementId = 9,
                            AppUserId = 2,
                            BodyFatPercentage = 12.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            HipCircumference = 20.0,
                            NeckCircumference = 12.0,
                            Units = "Imperial",
                            WaistCircumference = 28.0,
                            Weight = 126.59999999999999
                        },
                        new
                        {
                            BodyMeasurementId = 10,
                            AppUserId = 2,
                            BodyFatPercentage = 11.0,
                            DateAdded = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            Height = 60.0,
                            HipCircumference = 20.0,
                            NeckCircumference = 11.0,
                            Units = "Imperial",
                            WaistCircumference = 29.0,
                            Weight = 125.90000000000001
                        });
                });

            modelBuilder.Entity("Api.Domain.Models.PasswordReset", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Token");

                    b.HasIndex("AppUserId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("Api.Domain.Models.BodyMeasurement", b =>
                {
                    b.HasOne("Api.Domain.Models.AppUser", "AppUser")
                        .WithMany("BodyMeasurements")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Models.PasswordReset", b =>
                {
                    b.HasOne("Api.Domain.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
